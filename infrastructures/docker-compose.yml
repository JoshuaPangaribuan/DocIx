networks:
  docix-network:
    driver: bridge

volumes:
  minio-data:
    driver: local
  postgres-data:
    driver: local
  rabbitmq-data:
    driver: local
  esdata:
    driver: local

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: docix-postgres
    environment:
      POSTGRES_DB: docix
      POSTGRES_USER: docix_user
      POSTGRES_PASSWORD: docix_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts/postgres:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - docix-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U docix_user"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: docix-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - docix-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: docix-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: docix_user
      RABBITMQ_DEFAULT_PASS: docix_password
      RABBITMQ_DEFAULT_VHOST: /
      RABBITMQ_ERLANG_COOKIE: "docix-secret-cookie"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - docix-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 30s
      retries: 3

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
    container_name: docix-elasticsearch
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - docix-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana (Optional - for Elasticsearch monitoring)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.0
    container_name: docix-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    ports:
      - "5601:5601"
    networks:
      - docix-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # DocIx Application (for production deployment)
  docix-app:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: docix-application
    environment:
      # Database Configuration
      DATABASE_URL: jdbc:postgresql://docix-postgres:5432/docix
      DATABASE_DRIVER: org.postgresql.Driver
      DATABASE_USERNAME: docix_user
      DATABASE_PASSWORD: docix_password
      DATABASE_DIALECT: org.hibernate.dialect.PostgreSQLDialect

      # Elasticsearch Configuration
      ELASTICSEARCH_URL: http://docix-elasticsearch:9200

      # MinIO Configuration
      MINIO_URL: http://docix-minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET: docix-documents

      # RabbitMQ Configuration
      RABBITMQ_HOST: docix-rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: docix_user
      RABBITMQ_PASSWORD: docix_password

      # Document Processing Configuration
      DOCIX_PROCESSING_QUEUE_NAME: document.processing
      DOCIX_PROCESSING_EXCHANGE_NAME: document.exchange
      DOCIX_PROCESSING_ROUTING_KEY: document.process

      # Application Configuration
      SPRING_PROFILES_ACTIVE: production
      SERVER_PORT: 8080
    ports:
      - "8081:8080"
    networks:
      - docix-network
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
