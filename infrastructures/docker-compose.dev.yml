networks:
  docix-dev:
    driver: bridge
  docix-monitoring:
    driver: bridge
  docix-network:
    external: true

volumes:
  minio-dev-data:
    driver: local
  postgres-dev-data:
    driver: local
  rabbitmq-dev-data:
    driver: local
  esdata-dev:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

services:
  # PostgreSQL Database for Development
  postgres-dev:
    image: postgres:15
    container_name: docix-postgres-dev
    environment:
      POSTGRES_DB: docix
      POSTGRES_USER: docix_user
      POSTGRES_PASSWORD: docix_password
    volumes:
      - postgres-dev-data:/var/lib/postgresql/data
      - ./init-scripts/postgres:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - docix-dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U docix_user"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO Object Storage for Development
  minio-dev:
    image: minio/minio:latest
    container_name: docix-minio-dev
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio-dev-data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - docix-dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # RabbitMQ Message Broker for Development
  rabbitmq-dev:
    image: rabbitmq:3-management
    container_name: docix-rabbitmq-dev
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_DEFAULT_VHOST: /
      RABBITMQ_ERLANG_COOKIE: "docix-dev-secret-cookie"
    volumes:
      - rabbitmq-dev-data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - docix-dev
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 30s
      retries: 3

  # Elasticsearch for Development
  elasticsearch-dev:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
    container_name: docix-elasticsearch-dev
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata-dev:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - docix-dev
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana for Development (Optional)
  kibana-dev:
    image: docker.elastic.co/kibana/kibana:8.12.0
    container_name: docix-kibana-dev
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch-dev:9200
      - xpack.security.enabled=false
    ports:
      - "5601:5601"
    networks:
      - docix-dev
    depends_on:
      elasticsearch-dev:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: docix-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - docix-monitoring
      - docix-dev
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: docix-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=docix123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    networks:
      - docix-monitoring
    restart: unless-stopped
    depends_on:
      - prometheus

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: docix-node-exporter
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "9100:9100"
    networks:
      - docix-monitoring
    restart: unless-stopped

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: docix-cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - "8080:8080"
    networks:
      - docix-monitoring
    restart: unless-stopped

  # Elasticsearch Exporter
  elasticsearch-exporter:
    image: prometheuscommunity/elasticsearch-exporter:latest
    container_name: docix-es-exporter
    command:
      - '--es.uri=http://elasticsearch-dev:9200'
      - '--es.all'
      - '--es.indices'
      - '--es.shards'
    ports:
      - "9114:9114"
    networks:
      - docix-monitoring
      - docix-dev
    restart: unless-stopped

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: docix-otel-collector
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./config/otel:/etc
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8889:8889"   # Prometheus metrics
    networks:
      - docix-monitoring
      - docix-dev
    restart: unless-stopped
    depends_on:
      - jaeger

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: docix-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"  # Jaeger UI
      - "14250:14250"  # gRPC
    networks:
      - docix-monitoring
    restart: unless-stopped
